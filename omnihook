#!/usr/bin/env sh

# Polymorphic driver hook.
#
# When installed to a repository's hooks directory as FOO and invoked by Git,
# runs every executable file named FOO-* in that directory, passing along all
# relevant information. Exits with a nonzero status if any invoked executable
# does so (or if Git is extremely broken) and zero otherwise.
#
# See also: https://git-scm.com/docs/githooks/2.24.0


# Git prepends its exec directory to PATH, so this just works.
. git-sh-setup

# https://www.etalabs.net/sh_tricks.html, § "Getting non-clobbered output from
# command substitution"
hooks_dir=$(git rev-parse --git-path hooks && echo x) || exit
hooks_dir=${hooks_dir%??}

# Git executes hooks "normally", so $0 should contain the pathname.
hooks_prefix=${0##*/}

# If receiving data on standard input, save it to be repeatedly fed to the
# invoked hooks later. Using a temporary file is more complicated and possibly
# slower than using a variable and here-document, but it ensures predictable
# memory usage.
case $hooks_prefix in
    post-receive | post-rewrite | pre-push | pre-receive)
        # https://mywiki.wooledge.org/BashFAQ/062
        # https://mywiki.wooledge.org/SignalTrap
        hostname=${HOSTNAME:-${HOST:-$(hostname 2>/dev/null)}}
        tmpfile=~/.${hooks_prefix}${hostname:+_$hostname}_$$.tmp
        rm -f -- "$tmpfile" || exit
        trap 'rm -f -- "$tmpfile"' EXIT
        for sig in HUP INT QUIT TERM; do
            # Let the shell produce its "killed by signal" exit status.
            trap 'rm -f -- "$tmpfile"; trap - '$sig'; kill -s '$sig' $$' $sig
        done
        cat >"$tmpfile" || exit
        ;;
    *)
        tmpfile=
        ;;
esac

for hook in "$hooks_dir/$hooks_prefix"-*; do
    # Ignore nonexecutable hooks because Git does. Technically there's
    # a TOCTOU bug here, but I don't think it's worth worrying about.
    [ -f "$hook" ] && [ -x "$hook" ] || continue
    if [ -n "$tmpfile" ]; then
        "$hook" "$@" <"$tmpfile"
    else
        "$hook" "$@"
    fi || exit
done
